/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java library project to get you started.
 * For more details take a look at the 'Building Java & JVM projects' chapter in the Gradle
 * User Manual available at https://docs.gradle.org/7.2/userguide/building_java_projects.html
 */



plugins {
    id 'java-library'
    id 'base'
    id 'eclipse'
}

repositories {
    mavenCentral()
}

apply plugin: 'java'
apply plugin: 'base'

configurations {
    provided
}

eclipse {
  classpath {
    //you can tweak the classpath of the Eclipse project by adding extra configurations:
    plusConfigurations += [ configurations.provided ]
  }
}

version='0.0.1beta'

sourceCompatibility = '1.8'
targetCompatibility = '1.8'

dependencies {
   
   implementation group: 'jakarta.websocket',           name: 'jakarta.websocket-client-api',   version: '2.0.0'
   implementation group: 'jakarta.websocket',           name: 'jakarta.websocket-api',          version: '2.0.0'
   implementation group: 'org.glassfish.tyrus.bundles', name: 'tyrus-standalone-client',        version: '2.0.0'
   implementation group: 'org.glassfish.tyrus',         name: 'tyrus-server',                   version: '1.14'
   implementation group: 'org.glassfish.tyrus',         name: 'tyrus-container-grizzly-server', version: '2.0.0' 
   provided       group: 'org.fitnesse',                name: 'fitnesse',                     version: '20220815'
}

sourceSets {
    main {
        compileClasspath += configurations.provided
        runtimeClasspath += configurations.provided
        java {
            srcDir 'src'
        }
        resources {
            srcDir 'src'
            include '**/*.*'
        }
    }
    test {
        compileClasspath += configurations.provided
        runtimeClasspath += configurations.provided
        java {
            srcDir 'tests'
        }
        resources {
            srcDir 'tests'
            include '**/*.*'
        }
    }
}

task("writeFitNesseClasspath", type: WriteFitNesseClasspath) {
    FileCollection customClassPath = configurations.runtimeClasspath + configurations.provided
    pagePath = project.file("${projectDir}/tests/FitNesseRoot/GradleClasspath")
}

class WriteFitNesseClasspath extends DefaultTask {
    @InputFile
	@Optional
    FileCollection customClassPath

    @OutputDirectory
    File pagePath

    @TaskAction
    def generatePage() {
        try{
			def contentTxt = project.file("${pagePath}/content.txt")
			contentTxt.createNewFile()
			contentTxt.withWriter { writer ->
				writer.writeLine("page generated via gradle task !-WriteFitNesseClasspath!-!, do not modify manualy.")
				writer.writeLine("!path ${project.projectDir}/build/libs/*.jar")
				customClassPath.each { d ->
					writer.writeLine("!path $d")
				}
			}
		} catch (IOException e) {
			logger.error(e.getMessage(), e);
        }
		
    }
}

jar {
    manifest {
        attributes(
            'Plugin-archiveVersion' : archiveVersion,
            'Build-Jdk'             : "${System.properties['java.archiveVersion']} (${System.properties['java.vendor']} ${System.properties['java.vm.archiveVersion']})"
        )
    }
    
    from {
      configurations.compileClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    }
}

tasks.withType(Jar).all { duplicatesStrategy 'exclude' }

task sourcesJar(type: Jar) {
    from sourceSets.main.allSource
}

artifacts {
    archives sourcesJar
}

task noRegTests(type: JavaExec) {
    dependsOn writeFitNesseClasspath
    dependsOn jar

    classpath = sourceSets.main.runtimeClasspath
    mainClass = "fitnesseMain.FitNesseMain"
    args "-d", "tests", "-e", "0", "-o", "-c" , "NoRegressionTests?suite&format=html"
}

task run(type: JavaExec) {
    dependsOn writeFitNesseClasspath
    dependsOn jar
    classpath = sourceSets.main.runtimeClasspath
    mainClass = "fitnesseMain.FitNesseMain"
    args "-d", "tests", "-p", "8001", "-e", "0", "-o"
}
